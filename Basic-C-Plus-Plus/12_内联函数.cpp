#include <iostream>
using namespace std;

/**
 * 内联函数
 * 当内联函数被调用时，会将内联函数中的所有代码全部复制到被调用的地方(表面上看是调用一个内联函数，实则是将代码复制的一个行为)
 * 由于内联函数的机制，使得当调用多次内联函数时，会占用系统较大的内存空间
 * 但内联函数的优点又在于由于内联函数是复制代码行为，相较于常规函数的指针寻址调用，效率更高，耗费的时间更少
 * 
 * 总结：用空间换时间(当一个函数需要被多次调用，函数体代码又较少的时候，或是在拥有较大的空间但又不考虑内存开销的时候，可使用内联函数)
 * 注意：由于现今编译器的优化功能，当程序员写了一个函数体代码特别多的函数时
 *       即使将其声明为内联函数，系统也会由于函数体代码过多的限制，将一个即使声明为内联函数的函数作为普通函数
 *       递归不能作为内联函数使用，即使声明其为内联函数也不会作为内联函数
 * 
 * 无论是定义还是函数声明都要添加inline
 * 写法：
 * inline 函数的返回值 函数名(有无参数){函数体}
 */
inline void fun(int a)
{
    //a = a + 1;
    cout << a << endl;
}

int main()
{
    for (int i = 0; i < 10; i++)
    {
        fun(i);
    }

    system("pause");
    return 0;
}