C++头文件：
    C++中的头文件只需在C的基础上加c，并去掉.h后缀即可
    如异常的头文件在C语言中为：#inclde<stdlib.h>，在C++中的添加为：#include<cstdlib>

C++一元运算符:
    1.+，-，&，*
    2.正，负，取地址，内存操作符
    3.~，!

C++二元运算符：
    1.算术运算符：+，-，*，/，%
    2.关系运算符：>=，<=，>，<，!=，==
    3.位运算符：^，&，|
    4.逻辑运算符：&&，||

C++赋值运算符：
    +=，-=，*=，/=，%=，<<=，>>=，^=，&=，|=

C++的下标运算符:
    1.声明变量的时候带[]，表示声明的是数组变量(例：int a[20]，表示一个大小为20*4字节的整型数组)
    2.函数参数带有[]，表示指针
    3.地址+[]，表示下标运算(例：a[0] = 10，表示给数组a的第1个元素赋值为10)

C++中 *符号的三种用法：
    1.在初始化时，作为指针的声明符号，指针运算符
    2.在语句中，作为取值符号
    3.乘号

C++中 &符号的三种用法：
    1.在初始化时，作为引用的声明符号
    2.在语句中，作为取地址符号，与指针配合使用
    3.数值&数值，作为与运算符(1与上1 = 1，0与上0 = 0，0与上1 = 0)，类似于真假判定

C++临时变量：
    int i = int(10); 此时临时变量i = 10，和赋值语句类似，结果一样

C++临时对象：
    假设有类Stu
    Stu(); 即声明类Stu的一个临时对象
    Stu(10); 若类Stu中有有参构造，也可通过传入参数调用构造函数，但此时依旧是一个临时对象

C++中的限定词：
    private：私有，仅在类内可使用，类外不可使用(友元会破坏该规则)
    protected：受保护的，仅在该类和作为该类的子类中可以使用，类外不可使用
    public：公有的，可在任意位置使用

C++的函数的声明：
    当函数的位置在主函数下方，而主函数需要调用该函数时，就需要在主函数前加函数的声明
    函数声明只需写到函数的括号结束即可

C++的函数默认值：
    1.全部定义
    2.部分定义，从右向左定义，且必须是连续的
        即不能：
        void fun(int a = 0, int b, int c = 1){
            //这里a，b，c三个形式参数从中间断开，报错
        }
    3.指定了默认值的函数可以不用传递参数

C++重载函数：
    1.同一作用域内，函数名字相同
    2.参数类型不同或参数个数不同，即可重载
    3.返回值不作为函数重载的条件

C++ delete符的用法：
    1.delete指针的时候只看是谁的类型的指针
    2.无论delete指针是谁的类型，都会释放空间，最终调用的析构函数由最后的指针类型决定(包括强转)

